import React, { useContext, useEffect, useState } from "react"
import { makeApi } from "../../api/callApi"
import "./myWatchlist.css"
import { IoIosHeart } from "react-icons/io"
import { Link } from "react-router-dom"
import { ShopContext } from "../../context/ShopContext"
import Primaryloader from "../loaders/primaryloader.jsx"
import Heartloader from "../loaders/hearloader.jsx"
import HorizotalLoader from "../loaders/horizotalLoader.jsx"
import { assets } from "../../assets/assets"

const MyWatchlist = ({ search, category, minPrice, maxPrice }) => {
	// const [wishlistItems, setWishlistItems] = useState([])
	// const [loading, setLoading] = useState(false)
	// const { all_product, cartItems, addToCart, removeFromCart } =
	// 	useContext(ShopContext)
	// useEffect(() => {
	// 	const fetchWishlist = async () => {
	// 		try {
	// 			const response = await makeApi(`/api/get-my-wishlist`, "GET")
	// 			setWishlistItems(response.data.wishlist)
	// 		} catch (error) {
	// 			console.log(error)
	// 		}
	// 	}
	// 	fetchWishlist()
	// }, [])

	// const toggleWishlist = async (productId) => {
	// 	try {
	// 		const method = "POST"
	// 		const endpoint = `/api/create-wishlist/${productId}`
	// 		const data = await makeApi(endpoint, method)
	// 		console.log(data.data)
	// 		setWishlistItems(
	// 			wishlistItems.filter((item) => item.products._id !== productId)
	// 		)
	// 	} catch (error) {
	// 		console.log(error)
	// 	}
	// }
	const [products, setProducts] = useState([])
	const [wishlistItems, setWishlistItems] = useState([])
	const [watchlistProducts, setWatchlistProducts] = useState([])
	const [cartItems, setCartItems] = useState([])
	const [ResultPerPage, setResultPerPage] = useState(20)
	const [currentPage, setCurrentPage] = useState(1)
	const [totalPages, setTotalPages] = useState(0)
	const [toalProduct, setToalProduct] = useState(0)
	const [AllProductLoader, setAllProductLoader] = useState(false)
	const [AddTocartLoader, setAddTocartLoader] = useState(false)
	const [AddToWishlistLoader, setAddToWishlistLoader] = useState(false)
	const [IsLogin, setIsLogin] = useState(false)
	const [showPopup, setShowPopup] = useState(false)

	useEffect(() => {
		const token = localStorage.getItem("token")

		if (token) {
			setIsLogin(true)
		} else {
			setIsLogin(false)
		}
	}, [localStorage.getItem("token")])

	const fetchProduct = async () => {
		try {
			setAllProductLoader(true)
			const response = await makeApi(`/api/get-all-products`, "GET")
			setProducts(response.data.products)
			setToalProduct(response.data.totalProducts)
		} catch (error) {
			console.log(error)
		} finally {
			setAllProductLoader(false)
		}
	}
	useEffect(() => {
		const a = Math.ceil(toalProduct / ResultPerPage)
		setTotalPages(a)
	}, [products, ResultPerPage])
	const fetchCart = async () => {
		try {
			const response = await makeApi("/api/my-cart", "GET")
			setCartItems(
				response.data.orderItems.map((item) => ({
					productId: item.productId._id,
					quantity: item.quantity,
				}))
			)
		} catch (error) {
			console.log(error)
		}
	}

	useEffect(() => {
		const fetchWishlist = async () => {
			try {
				setAddToWishlistLoader(true)
				const response = await makeApi("/api/get-my-wishlist", "GET")
				setWatchlistProducts(response.data.wishlist)
				const wishlistIds = response.data.wishlist
					.filter((item) => item.products !== null)
					.map((item) => item.products._id)
				setWishlistItems(wishlistIds)
			} catch (error) {
				console.log(error)
			} finally {
				setAddToWishlistLoader(false)
			}
		}

		fetchWishlist()
	}, [])

	useEffect(() => {
		fetchProduct()
		fetchCart()
	}, [search, category, minPrice, maxPrice, currentPage, ResultPerPage])

	const isInCart = (productId) => {
		return cartItems.some((item) => item.productId === productId)
	}
	const closePopup = () => {
		setShowPopup(false)
	}

	const toggleWishlist = async (id) => {
		if (!IsLogin) {
			setShowPopup(true)
		} else {
			try {
				setAddToWishlistLoader(true)
				const method = "POST"
				const endpoint = `/api/create-wishlist/${id}`
				const data = await makeApi(endpoint, method)
				setWishlistItems((prevState) => {
					if (prevState.includes(id)) {
						return prevState.filter((itemId) => itemId !== id)
					} else {
						return [...prevState, id]
					}
				})
			} catch (error) {
				console.log(error)
			} finally {
				setAddToWishlistLoader(false)
			}
		}
	}

	const addToCart = async (productId) => {
		if (!IsLogin) {
			setShowPopup(true)
		} else {
			try {
				setAddTocartLoader(true)
				const method = "POST"
				const endpoint = "/api/add-to-cart"
				const data = await makeApi(endpoint, method, {
					productId,
					quantity: 1,
					shippingPrice: 0,
				})
				setCartItems((prevState) => {
					const existingItem = prevState.find(
						(item) => item.productId === productId
					)
					if (existingItem) {
						return prevState.map((item) => {
							if (item.productId === productId) {
								return { ...item, quantity: item.quantity + 1 }
							}
							return item
						})
					} else {
						return [...prevState, { productId, quantity: 1 }]
					}
				})
			} catch (error) {
				console.log(error.response.data)
			} finally {
				fetchCart()
				setAddTocartLoader(false)
			}
		}
	}

	const removeFromCart = async (productId) => {
		try {
			setAddTocartLoader(true)
			const method = "POST"
			const endpoint = "/api/remove-from-cart"
			const data = await makeApi(endpoint, method, { productId })
			setCartItems((prevState) =>
				prevState.filter((item) => item.productId !== productId)
			)
		} catch (error) {
			console.log(error)
		} finally {
			fetchCart()
			setAddTocartLoader(false)
		}
	}

	const getProductQuantity = (productId) => {
		const cartItem = cartItems.find((item) => item.productId === productId)
		return cartItem ? cartItem.quantity : 0
	}
	const handlePageClick = (pageNumber) => {
		setCurrentPage(pageNumber)
	}

	return (
		<div className="myWatchlist">
			<div className="userprofile-heading">
				<h1>MY WISHLIST</h1>
			</div>

			{wishlistItems.length === 0 ? (
				<div className="text-center">
					<h2>Your wishlist is empty</h2>
				</div>
			) : (
				<div className="userprofile-heading wishlist-items">
					{watchlistProducts?.map((item, index) => {
						return (
							<div
								className="item wishlist-item-card"
								key={index}
							>
								<div className="item-card ">
									<IoIosHeart
										className={`watchlist-icon pointer-event wishlist-active`}
										onClick={() => toggleWishlist(item?.products?._id)}
									/>
									{/* <Link to={`/openproduct/${item?.products?._id}`}> */}
									<Link to={`/productdisplay/${item?.products?._id}`}>
										<img
											src={item?.products?.thumbnail}
											alt=""
										/>
									</Link>
									<div className="item-price-name">
										<p className="item-name">{item?.products?.name}</p>
										<div className="old-new-price">
											<p className="old-item-price">
												₹{item?.products?.PriceAfterDiscount}
											</p>
											<p className="new-item-price">₹{item?.products?.price}</p>
										</div>
									</div>

									{/* You need to handle cartItems and addToCart/removeFromCart */}

									<div className="item-cart">
										{!isInCart[item?.products?._id] ? (
											<div
												className="item-addto-cart "
												onClick={() => addToCart(item?.products._id)}
											>
												ADD TO CART
											</div>
										) : (
											<div className="food-item-counter">
												<img
													// onClick={() => removeFromCart(item?.products?._id)}
													onClick={() => removeFromCart(item.products._id)}
													src={assets.add_icon_red}
													alt=""
												/>
												<p className="cart-item-no">
													{cartItems[item?.products?._id]}
												</p>
												<img
													onClick={() => addToCart(item?.products?._id)}
													src={assets.add_icon_green}
													alt=""
												/>
											</div>
										)}
									</div>

									{/* You need to handle cartItems and addToCart/removeFromCart */}
								</div>
							</div>
						)
					})}
				</div>
			)}
		</div>
	)
}

export default MyWatchlist
