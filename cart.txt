import React, { useContext, useEffect, useState } from "react"
// import { makeApi } from "../api/callApi"
import { assets } from "../assets/assets"
import { useNavigate } from "react-router"
import Orderbar from "../components/orderbar/orderbar"
import { ToastContainer } from "react-toastify"
import Primaryloader from "../components/loaders/primaryloader"
import { Link } from "react-router-dom"
import {
	cartItemFetchCart,
	cartItemAddToCart,
	cartItemRemoveFromCart,
	removeAllProductsFromCart,
} from "../utils/productFunction"
import useCoupon from "../hook/coupanHook"
import { ShopContext } from "../context/ShopContext"
import { makeApi } from "../api/callApi"
import CartCalculation from "../components/CartCalculation/cartCalculation"

const CouponFunctions = () => {
	const {
		cartItems,
		getTotalCartDiscountAmount,
		all_product,
		getTotalCartAmount,
	} = useContext(ShopContext)

	const {
		couponCode,
		setCouponCode,
		appliedCoupon,
		couponDiscount,
		applyCoupon,
		removeCoupon,
	} = useCoupon()

	const totalDiscount = (
		getTotalCartAmount() - getTotalCartDiscountAmount()
	).toFixed(2)

	const navigate = useNavigate()

	const [shippingAddresses, setShippingAddresses] = useState([])
	const [loading, setLoading] = useState(false)
	const [selectedAddress, setSelectedAddress] = useState(null)
	const [cartItem, setCartItem] = useState([])
	const [cartPoductList, setCartProductList] = useState([])
	const [AllProductLoader, setAllProductLoader] = useState(false)
	const [productLoaders, setProductLoaders] = useState({})
	const [IscartEmpty, setIsCartEmpty] = useState(false)

	const fetchShippingAddresses = async () => {
		try {
			setLoading(true)
			const response = await makeApi("/api/get-my-shiped-address", "GET")
			setShippingAddresses(response.data.shipedaddress)
			setLoading(false)
		} catch (error) {
			console.error("Error fetching shipping addresses: ", error)
			setLoading(false)
		}
	}

	const handleAddressSelect = (address) => {
		setSelectedAddress(address)
	}

	useEffect(() => {
		fetchShippingAddresses()
	}, [])

	const fetchCartItem = async () => {
		await cartItemFetchCart(
			setCartItem,
			setCartProductList,
			setAllProductLoader,
			setIsCartEmpty
		)
	}

	const removeFromCart = async (productId) => {
		await cartItemRemoveFromCart(productId, setProductLoaders, fetchCartItem)
	}

	const addToCart = async (productId) => {
		await cartItemAddToCart(productId, setProductLoaders, fetchCartItem)
	}

	const handleAddToCart = (productId, quantity, availableQuantity) => {
		if (quantity < availableQuantity) {
			addToCart(productId)
		} else {
			toast.error("Cannot add more than available quantity.")
		}
	}

	useEffect(() => {
		fetchCartItem()
	}, [])
	return (
		<div>
			<div className="cart-bottomm">
				<div className="cart-address">
					<div className="cart-shipping-address"></div>
				</div>

				<div className="cart-billing">
					{/* <div className="cart-promocode">
						<h2>HAVE A COUPON ?</h2>
						<div className="cart-promocode-input">
							<input
								type="text"
								placeholder="COUPON CODE"
								value={couponCode}
								onChange={(e) => setCouponCode(e.target.value)}
								disabled={appliedCoupon !== null}
							/>
							{appliedCoupon ? (
								<button onClick={removeCoupon}>REMOVE</button>
							) : (
								<button onClick={(e) => applyCoupon(couponCode)}>APPLY</button>
							)}
						</div>
					</div> */}
					{/* <div className="cart-order-summary">
						<h2>order summary</h2>
						<div className="cart-billing-charges">
							<div className="cart-billing-subtotal">
								<p>SUBTOTAL</p>
								<p>
									₹
									{cartItem.totalPrice
										? cartItem.totalPrice.toFixed(2)
										: "0.00"}
								</p>
							</div>
							<div className="cart-billing-discount">
								<p>DISCOUNT</p>
								<p>{appliedCoupon ? couponDiscount : totalDiscount}%</p>
							</div>
							<div className="cart-billing-tax">
								<p>TAX</p>
								<p>{18}%</p>
							</div>
							<div className="cart-billing-shipping">
								<p>SHIPPING</p>
								<p>{cartItem.shippingPrice}</p>
							</div>
							<div className="cart-billing-shipping">
								<b>TOTAL</b>
								<b>
									₹
									{cartItem.TotalProductPrice -
										cartItem.TotalProductPrice * (couponDiscount / 100)}
								</b>
							</div>
						</div>
						<button
							className="proceed_to_payment_button"
							onClick={() => navigate("./checkout")}
						>
							proceed to checkout
						</button>
						<hr />
						<p className="cart-delivery-day">
							Estimated delivery in <span>3 to 5</span> Days
						</p>
					</div> */}

					{/* </div> */}

					{/* <CartCalculation
						tax={cartItem.taxPrice}
						shipping={cartItem.shippingPrice}
						total={cartItem.totalPrice}
						CoupanApplied={appliedCoupon ? couponDiscount : totalDiscount}
						Final={
							cartItem.TotalProductPrice -
							cartItem.TotalProductPrice * (couponDiscount / 100)
						}
						ButtonName="PROCEED TO CHECKOUT"
					/> */}

					<CartCalculation
						tax={cartItem.taxPrice}
						shipping={cartItem.shippingPrice}
						Final={cartItem.TotalProductPrice}
						CoupanApplied={appliedCoupon ? couponDiscount : totalDiscount}
						// total={
						// 	cartItem.totalPrice -
						// 	cartItem.TotalProductPrice * (couponDiscount / 100)
						// }

						total={
							cartItem.totalPrice
						}
						ButtonName="PROCEED TO CHECKOUT"
					/>
				</div>
			</div>
		</div>
	)
}

export default CouponFunctions
